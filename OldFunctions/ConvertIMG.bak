function [imQL, imPSL] = ConvertIMG(image_directory)
% convertIMG: Load a .img image and convert to images with QL and PSL values
%
% This function moves to a directory containing binary-encoded .img files
% with it's corresponding .inf information file. Files are read with the
% parameters defined below, and outputted as 2 sets of cell arrays with
% either QL or PSL-pixel values (I recommend saving only PSL images). 
%
% Usage:
%   [imQL, imPSL] = ConvertIMG(image_directory)
% 
% Input: 
%     image_directory: directory string storing .img/.inf files
% 
%     Default values for fopen() function:
%       permission: 'r' (read only)
%       machinefmt: 's' (Big-endian ordering, 64-bit long data type)
% 
%     Default values for fread() function: 
%       sizeA: determined by .inf (dimensions for Phosphoimager scanner)
%       precision: 'ubit16' (image stored in 16-bit binary code)
% 
%     Default values for imrotate() function:
%       angle: -90 (rotate counterclockwise 90°)
%
% Output:
%     imQL: 
%
%     imPSL: 
% 

%% Establish default parameters for opening and reading .img/.inf files
% image_directory = 'C:\Users\Julian Bustamante\OneDrive\Lee Lab collaboration\pVL791 library screen p5g alone\QL_images';

permission = 'r';        % Open files with Read-only permissions
machinefmt = 's';        % Read .img with 64-bit long, big-endian ordering
precision_inf = '*char'; % Read .inf with char encoding
delimiter_inf = '\n';    % Set .inf delimiter to make cell string array
precision_img = 'ubit16';% Read .img with binary 16-bit encoding
angle = -90;             % Rotate .img image 90° counter-clockwise

%% Move from working directory to directory containing .img images
currentDir = pwd;
cd(image_directory);
imgFiles = dir('*.img');
infFiles = dir('*.inf');

%% Extract image information from .inf files
% Set-up structure containing .inf information
infDataFields = {'ImageFile', 'iDunno', 'Sen' 'Bits', 'Rows', 'Columns', 'Res', 'Lat'};
empty_cells = repmat(cell(1),1,numel(infDataFields));
entries = {infDataFields{:} ; empty_cells{:}};
infStruct = struct(entries{:});

% Open, Read, and Extract information from .inf file
% Store information into structure array
for i = 1:length(infFiles)
    infOpen = fopen(infFiles(i).name, permission);
    infRead = fread(infOpen, [1 inf], precision_inf);
    infString = strsplit(infRead, delimiter_inf);
    infData = infString(1, 2:9)';
    infStruct(i) = cell2struct(infData, infDataFields);
    fclose(infOpen);
end

%% Load and Read .img files
imQL{length(imgFiles)} = [];
imPSL{length(imgFiles)} = [];

% Open and Read images from .img files.
% Flip and Rotate raw image, since output is in an odd format
% Convert QL-pixel values to PSL-pixel values (store both)
for i = 1:length(infFiles)
    % Set-up parameters for reading .img file and converting to PSL-pixels
    sizeA = [str2double(infStruct(i).Rows) str2double(infStruct(i).Columns)];
    res = str2double(infStruct(i).Res);
    sen = str2double(infStruct(i).Sen);    
    lat = str2double(infStruct(i).Lat);
    bit = str2double(infStruct(i).Bits);
    
    % Determine gradation for PSL-pixel conversion (8- vs 16-bit images)
    if (bit == 16)
        grad = 65535;
    elseif (bit == 8)
        grad = 255;
    else
        disp('Bit encoding not found');
        break;
    end
    
    % Open .img file and read image using parameters from .inf file
    % Convert to PSL-pixel values
    imgOpen = fopen(imgFiles(i).name, permission, machinefmt);
    imQL{i} = fliplr(imrotate(fread(imgOpen, sizeA, precision_img), angle));
    imPSL{i} = ql2psl(imQL{i}, res, sen, lat, grad, 'QL2PSL');
    fclose(imgOpen);
end
fclose('all');

%% Save converted images into working directory
cd(currentDir);
save('allImages_QL', 'imQL');
% Having weird issues with psl-converted images. 
% Images have incorrect pixel values (not double) and 
% are >2x larger file size than they should be.
% DO NO USE FOR TIME BEING
save('allImages_PSL', 'imPSL'); 

%% Verify conversion is correct 
figure;
for i = 1:length(imQL)
    % Visualize image with QL-pixel values
    subplot(121);
    imagesc(imQL{i}), colormap gray, axis image, axis off, title(sprintf('Image %d', i));
    drawnow;
    
    % Visualize image with PSL-pixel values
    subplot(122);
    imagesc(imPSL{i}), colormap gray, axis image, axis off, title(sprintf('Image %d', i));
    drawnow;
end

